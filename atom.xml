<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[@chaoming.edc blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.edi-c.com/"/>
  <updated>2014-12-13T05:06:00.920Z</updated>
  <id>http://blog.edi-c.com/</id>
  
  <author>
    <name><![CDATA[chaoming.edc|blastmann]]></name>
    <email><![CDATA[chaoming.edc@outlook.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[WebViewJavascriptBridge For WinRT]]></title>
    <link href="http://blog.edi-c.com/post/webviewjavascriptbridge-for-winrt.html"/>
    <id>http://blog.edi-c.com/post/webviewjavascriptbridge-for-winrt.html</id>
    <published>2014-12-06T12:37:51.000Z</published>
    <updated>2014-12-13T05:04:25.000Z</updated>
    <content type="html"><![CDATA[<p>直奔主题，之前说了<a href="/post/a-solution-for-any-hosts-to-notify-winrt-8-1-webview.html">如何在WinRT 8.1下面通过<code>ScriptNotify</code>接收页面JS对Native Code发送的消息</a>。虽然示例工程也说得比较清楚，但是没有封装成一个类似iOS/OSX下面的<a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank">WebViewJavscriptBridge</a>插件。于是这两天闲来无事，将其封装成Runtime Component。Repo：<a href="https://github.com/blastmann/WebViewJavascriptBridgeRT" target="_blank">WebViewJavascriptBridgeRT</a>。</p>
<p>整个Bridge跟iOS下面的封装几乎一样，主体JS也是从那边拿过来改了适配了一下就用了。整体流程在示例App里面写得比较清楚，就不重复写了。主要流程就是：新建桥接-&gt;注册回调接口-&gt;对页面发送消息或调用注册接口。</p>
<p>不同于ObjC，在解析JS回传的JSON时，由于不建议使用<code>dynamic</code>，因此暂时建议在回传的时候统一对结果进行<code>stringify</code>处理，获取到结果的字符串后再自行解析成所需对象。JSON解析引用了JSON.Net，速度还是挺不错的。</p>
<p>暂时发现在WebView里面回调本地代码似乎有点性能问题，后面需要再跟进一下。然后再研究一下回传结果的解析函数能否使用泛型重写，这样似乎能更方便地处理回传结果的解析问题，避免上面的限制。</p>
]]></content>
    
    
      <category term="winrt" scheme="http://blog.edi-c.com/tags/winrt/"/>
    
      <category term="webview" scheme="http://blog.edi-c.com/tags/webview/"/>
    
      <category term="js" scheme="http://blog.edi-c.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[编译wxSQLite3 for WinRT]]></title>
    <link href="http://blog.edi-c.com/post/compile-a-wxsqlite3-for-winrt.html"/>
    <id>http://blog.edi-c.com/post/compile-a-wxsqlite3-for-winrt.html</id>
    <published>2014-11-22T14:52:55.000Z</published>
    <updated>2014-12-06T12:37:07.000Z</updated>
    <content type="html"><![CDATA[<p>原生的SQLite没有实现加解密接口，只留了一个函数入口给开发者自行实现。在Windows下面本身提供了一个跟ADO.NET紧密结合的SQLite，支持加解密。但WinRT上面使用的还是原生的SQLite，这就只能依靠开发者自己去实现一个加解密流程。幸好wxWidget这开源工程里面本来就实现了一个支持AES 128/256位加密的SQLite，只需要将这个wxSQLite按照WinRT的编译流程去编译打包成VSIX包就可以了。具体的实现，我已经把<a href="https://github.com/blastmann/wxSqlite3-WinRT-Project" target="_blank">已编译的包和可编译的源码都放在Github上</a>了，有兴趣的可以去弄一下。</p>
<p>注意点：</p>
<ol>
<li>编译前需要安装好Cygwin、Active Tcl 8.5和zip\unzip命令。</li>
<li>原版的SQLite-Net没有导入和封装加解密函数，同样的在源码里面已经有封装好的了。</li>
<li>个人只测试了加解密和数据库读取能正常工作，不确保在写入的时候会有异常情况发生，欢迎在repo里面留下issue。</li>
</ol>
]]></content>
    
    
      <category term="winrt" scheme="http://blog.edi-c.com/tags/winrt/"/>
    
      <category term="sqlite" scheme="http://blog.edi-c.com/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用Link大法让Visual Studio工程文件自动更新Assets]]></title>
    <link href="http://blog.edi-c.com/post/easy-way-to-manage-assets-in-visual-studio.html"/>
    <id>http://blog.edi-c.com/post/easy-way-to-manage-assets-in-visual-studio.html</id>
    <published>2014-11-17T11:50:46.000Z</published>
    <updated>2014-12-06T12:37:07.000Z</updated>
    <content type="html"><![CDATA[<p>前段时间在做<a href="http://www.windowsphone.com/s?appid=fb0ce559-ea2a-4447-abac-599da5e90e50" target="_blank">MH4 Dex RT</a>的时候，Ping叔给了一堆图片资源（几千张），都是一些小图标。每次做完图片处理之后都要重新拉到工程里面，做了好几次的时候就觉得超麻烦。每次往VS里面拖图片都会被它自动复制一份，拖的时候VS还会卡住好长一段时间。想了半天要不要用脚本解决这问题，最后发现我大VS竟然提供了一个特别的功能叫”Add as Link”。简单修改一下工程文件就可以让VS自动更新工程目录下的工程资源了。</p>
<p>以Universal Project为例，用编辑器打开.Shared目录下面的<code>.projitems</code>文件，进行下面的操作：</p>
<ol>
<li>找到原来的Assets目录声明，一般在某个ItemGroup里面。</li>
<li><p>用下面的XML片段替换：</p>
<pre><code> <span class="tag">&lt;<span class="title">Content</span> <span class="attribute">Include</span>=<span class="value">"$(MSBuildThisFileDirectory)Assets\**\*.*"</span>&gt;</span>
     <span class="tag">&lt;<span class="title">Link</span>&gt;</span>Assets\%(RecursiveDir)%(FileName)%(Extension)<span class="tag">&lt;/<span class="title">Link</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">Content</span>&gt;</span>
</code></pre></li>
<li><p>保存，在VS里面重新加载工程。</p>
</li>
</ol>
<p>如此修改之后，以后在Shared工程里面添加资源后，只要在VS里面进行一次Project Reload即可更新Assets，十分方便快捷。</p>
<p>PS：此方法也适用于一份代码共享多个工程的情况。</p>
<p>PPS：不要尝试在VS里面对Link的资源进行复制、删除等操作。</p>
]]></content>
    
    
      <category term="winrt" scheme="http://blog.edi-c.com/tags/winrt/"/>
    
      <category term="vs2013" scheme="http://blog.edi-c.com/tags/vs2013/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[让WinRT 8.1 Webview支持任意站点下的JS通知]]></title>
    <link href="http://blog.edi-c.com/post/a-solution-for-any-hosts-to-notify-winrt-81-webview.html"/>
    <id>http://blog.edi-c.com/post/a-solution-for-any-hosts-to-notify-winrt-81-webview.html</id>
    <published>2014-08-04T14:10:00.000Z</published>
    <updated>2014-12-13T05:05:35.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在使用WebBrowser\Webview一类的控件时，一般都免不了与JS打交道。从WP7开始，微软的WebBrowser就支持使用<code>ScriptNotify()</code>进行JS与C#代码间的交互，到WinRT下的Webview仍然有这么一个API供开发者使用，但适用情况有些许改变。</p>
<h2 id="问题描述">问题描述</h2>
<p>WinRT 8.1下，微软增强了Webview控件的大部分功能，同时也废弃了几个允许脚本通知（ScriptNotify)的属性。关于ScriptNotify，在8.1的帮助文档里面有这么一段注释：</p>
<blockquote>
<p>To enable an external web page to fire the ScriptNotify event when calling window.external.notify, you must include the page’s URI in the ApplicationContentUriRules section of the app manifest. (You can do this in Visual Studio on the Content URIs tab of the Package.appxmanifest designer.) The URIs in this list must use HTTPS and may contain subdomain wildcards (for example, “<a href="https://*.microsoft.com" target="_blank">https://*.microsoft.com</a>“), but they can’t contain domain wildcards (for example, “<a href="https://*.com" target="_blank">https://*.com</a>“ and “<a href="https://*.*" target="_blank">https://*.*</a>“). The manifest requirement does not apply to content that originates from the app package, uses an ms-local-stream:// URI, or is loaded using NavigateToString.<br>Note  If you have more then one subdomain, you must use one wildcard for each subdomain. For example, “<a href="https://*.microsoft.com" target="_blank">https://*.microsoft.com</a>“ matches with “<a href="https://any.microsoft.com" target="_blank">https://any.microsoft.com</a>“ but not with “<a href="https://this.any.microsoft.com" target="_blank">https://this.any.microsoft.com</a>.”<br>These changes do not affect apps compiled for Windows 8, even when running on Windows 8.1.</p>
<p>AllowedScriptNotifyUris, AnyScriptNotifyUri, and AllowedScriptNotifyUrisProperty are not supported in apps compiled for Windows 8.1.</p>
</blockquote>
<p>也就是说，只有在应用开发过程中，开发者主动添加在<code>Package.appxmanifest</code>中的，并且只能是HTTPS下的Uri才可以进行脚本的主动通知。开发者无法直接地对非HTTPS的站点进行JS注入后的主动通知，而且需要维护一个庞大的白名单。</p>
<h2 id="解决思路：微软的示例代码中有一段神奇的注释">解决思路：微软的示例代码中有一段神奇的注释</h2>
<p>在微软给出的Webview示例中，有这么一段注释：</p>
<blockquote>
<p>Content loaded using the NavigateToString() method; or ms-appx-web, ms-appdata, ms-webview-stream:// URI schemes can get the result back automatically. </p>
</blockquote>
<p>有两种情况，Webview可以无视上面描述的通知限制。</p>
<ol>
<li>使用<code>NavigateToString()</code>显示的页面</li>
<li>使用<code>ms-appx-web</code>、<code>ms-appdata</code>和<code>ms-webview-stream://</code>导航显示的页面</li>
</ol>
<p>那么，这个问题就转变成：能否在其它网站页面中引入一个本地页面作为与本地C#代码进行交互呢？</p>
<p>答案是可以的。</p>
<p>经过测试，我们完全可以在应用中引入一个HTML文档，文档中只需要简单地在页面中封装<code>window.external.notify()</code>这个JS函数。然后在任意页面中通过JS创建<code>iframe</code>标签并使用<code>ms-appx-web</code>协议引用这个本地的HTML文档。只要HTML文档可以正常加载，那么问题将转化为：如何对<code>iframe</code>进行跨域通信？</p>
<p>关于<code>iframe</code>的跨域通信，网上有不少的解决方法。在我的示例中只使用了<code>postMessage</code>这个HTML5 API进行通信（不兼容IE8以下）。</p>
<p><img src="https://xbyjdw.bn1.livefilestore.com/y2pB5LW1JARe7w32dZ04XD6eijpeYMoYH9g8tKZKnIoJib-7W5OVK8B5ypBVHG6A0zjIMoYqIanjg6fBOXg86IIro4UTz_isP0gsXvEaF_L9C4/any-uri-notify.png?psid=1" alt="any-uri-notify"></p>
<p>示例代码下载：<a href="https://www.dropbox.com/s/tv2sq7qt9ybuopz/Control_WebView.zip" target="_blank">点击下载</a>。</p>
<p>PS：微软限制JS的通知当然是出于安全性的考虑了，所以我们在使用这种方法的时候，也需要好好考虑一下会不会造成什么安全隐患。另外，我个人是希望JS通知这东西能少则少，毕竟性能也不是很好，建议尽量是减少使用的。</p>
]]></content>
    
    
      <category term="winrt" scheme="http://blog.edi-c.com/tags/winrt/"/>
    
      <category term="webview" scheme="http://blog.edi-c.com/tags/webview/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为Windows Phone Developer Power Tools设置语言]]></title>
    <link href="http://blog.edi-c.com/post/set-language-in-wp81-dev-power-tools.html"/>
    <id>http://blog.edi-c.com/post/set-language-in-wp81-dev-power-tools.html</id>
    <published>2014-07-09T02:15:51.000Z</published>
    <updated>2014-07-09T14:19:27.000Z</updated>
    <content type="html"><![CDATA[<p>WP8.1 SDK新添加了一个工具叫做<a href="http://msdn.microsoft.com/zh-cn/library/windows/apps/dn629255.aspx" target="_blank">Developer Power Tools</a>，这个工具比以前的Profile工具好用（虽然还是不会用，找内存泄漏太难了）。本文主要是为了解决一个问题：<strong>在中文系统上安装英文的VS2013后，启动Power Tools发现连接的模拟器名字多了一个“zh-HANS”，导致Debug的模拟器和Power Tools启动的模拟器不是同一个的问题</strong>。</p>
<p>废话少说，直接上干货。</p>
<p>设置Power Tools的启动语言，只需要在对应快捷方式的目标路径中添加<code>-language en-US</code>即可，例如：</p>
<pre><code>"C:<span class="command">\Program</span> Files (x86)<span class="command">\Microsoft</span> SDKs<span class="command">\Windows</span> Phone<span class="command">\v</span>8.1<span class="command">\Tools</span><span class="command">\PowerTools</span><span class="command">\PwTools</span>.exe" -language en-US
</code></pre><p>有空补个截图吧。</p>
<p>PS：MSDN文档能不能完善一点，新加一个新工具竟然连使用说明都没有。ETL文件怎么分析也没说，哎。这启动参数还是用JustDecompile反编译出来才发现的。调了半天以为格式是”-language=en-US”，再仔细看才发现是用空格区分的。</p>
<p>PSS：参数用/或者-开头都可以。</p>
]]></content>
    
    
      <category term="wp" scheme="http://blog.edi-c.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift使用感受]]></title>
    <link href="http://blog.edi-c.com/post/feeling-swift.html"/>
    <id>http://blog.edi-c.com/post/feeling-swift.html</id>
    <published>2014-07-08T01:59:46.000Z</published>
    <updated>2014-07-27T00:27:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>Apple这次发布Swift语言，是想把OC开发者渐渐迁移到新平台上面吧。暂时来说，Swift具备了很多OC不具备的语言特性，更方便智商不够用的开发者来到iOS平台进行开发。但是，Swift离取代OC的日子还有点远。因为Swift的特性还不能完全覆盖OC的所有特性（举个例子：KVO暂时还没有）。所以未来有一段时间都会是两种语言并行使用。</p>
<p>在Xcode 6正式版还没有出来之前，不建议用Swift来做主力开发语言。因为Xcode 6 Beta对Swift的支持实在是有问题（至少在我的机器上是这样）。智能提示经常提示一些乱七八槽的东西，而且崩溃的机率也很大。</p>
<p>所以，暂时还是学好OC比较有用。虽然Swift更安全更方便，但是用OC先摸一下iOS平台上的坑，还是有必要的。</p>
<p>下面的内容有点乱，随便看看就好。</p>
<h2 id="Swift初体验">Swift初体验</h2>
<h3 id="1-_基础点">1. 基础点</h3>
<ol>
<li>有动态语言的语法特征，但用的是类型推导，是编译型语言</li>
<li>有泛型，个人觉得最直观的体现就是Array和Dictionary终于是强类型的了但还有些很神奇的坑。</li>
<li>可空类型，有助于进行链式调用编写。</li>
<li><del>官方文档上没有发现有<code>public</code> \ <code>private</code>等关键字，全部定义都是公有，这样真没有问题么？虽然类型安全了，但是API编写可能存在比较大的风险。</del> Xcode beta4添加了相关定义，已修正这个问题。</li>
<li>var定义的是变量，let定义的是常量（简单理解）。</li>
<li>…这里想到再补充吧</li>
</ol>
<h3 id="2-_闭包">2. 闭包</h3>
<p>闭包就跟OC里面的Block差不多（Block就是一个语法丑了一点的闭包）。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="type">class</span> HTMLElement: NSObject {
    let <span class="property">name</span>: String
    let <span class="type">text</span>: String?
    
    @lazy var asHTML: () -&gt; String = {
        [unowned self] <span class="keyword">in</span>
        <span class="keyword">if</span> let <span class="type">text</span> = self.<span class="type">text</span> {
<span class="command">            return</span> <span class="string">"&lt;\(self.name)&gt;\(text)&lt;/\(self.name)&gt;"</span>
        } <span class="keyword">else</span> {
<span class="command">            return</span> <span class="string">"&lt;\(self.name) /&gt;"</span>
        }
    }
    
    init(<span class="property">name</span>: String, <span class="type">text</span>: String? = nil) {
        self.<span class="property">name</span> = <span class="property">name</span>
        self.<span class="type">text</span> = <span class="type">text</span>
    }
    
    deinit {
        println(<span class="string">"\(name) is being deinitialized"</span>)
    }
}
</pre></td></tr></table></figure>

<h5 id="Nested_Function也算是一种闭包">Nested Function也算是一种闭包</h5>
<figure class="highlight swift"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>func makeIncrementor<span class="function"><span class="params">(forIncrement amount: Int)</span> -&gt;</span> <span class="function"><span class="params">()</span> -&gt;</span> Int {
    <span class="reserved">var</span> runningTotal = <span class="number">0</span>
    func incrementor<span class="function"><span class="params">()</span> -&gt;</span> Int {
        runningTotal += amount
        <span class="keyword">return</span> runningTotal
    }
    <span class="keyword">return</span> incrementor
}
</pre></td></tr></table></figure>

<h3 id="3-_泛型（赞）">3. 泛型（赞）</h3>
<p>Swift里面可以使用泛型了，但是使用了泛型的话就不能与OC进行对接，这点需要事先声明。因为泛型不可以与OC进行对接，所以下面的代码会出现链接错误：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">errorGenericObject</span><span class="inheritance">&lt;<span class="parent">T</span></span>&gt; : <span class="title">NSObject</span> {</span>
    let <span class="symbol">member:</span> <span class="constant">T</span>
    init(<span class="symbol">aMember:</span> <span class="constant">T</span>) {
        <span class="keyword">self</span>.member = aMember
    }
}
</pre></td></tr></table></figure>

<p>反正我把<code>NSObject</code>的继承去掉之后就可以正常使用了，我觉得Xcode在这个提示上面可以更清晰一些，beta3里面如果有这样的编码，编译时只会提示链接错误，而且错误信息也不是很清晰。</p>
<p>官方文档说可以用数组来处理这种问题：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="variable">@objc</span> <span class="class"><span class="keyword">class</span> <span class="title">errorObj</span><span class="inheritance">&lt;<span class="parent">T</span></span>&gt; {</span>
    private let <span class="symbol">_member:</span> [<span class="constant">T</span>]
    var <span class="symbol">member:</span> <span class="constant">T</span> {
        <span class="keyword">return</span> _member[<span class="number">0</span>]
    }
    
    init(<span class="symbol">aMember:</span> <span class="constant">T</span>) {
        <span class="keyword">self</span>._member = []
        <span class="keyword">self</span>._member[<span class="number">0</span>] = aMember
    }
}
</pre></td></tr></table></figure>

<p>编译后Swift生成的OC类会是这样的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>SWIFT_CLASS(<span class="string">"_TtC12TestSwiftApp8errorObj"</span>)
<span class="class"><span class="keyword">@interface</span> <span class="title">errorObj</span></span>
<span class="keyword">@end</span>
</pre></td></tr></table></figure>

<p>即使可以编译过了，但泛型相关的信息也会被抹消掉，结果就是这种泛型类无法在OC下使用。</p>
<h3 id="4-_ARC">4. ARC</h3>
<p>ARC的规则与OC里面差不多，需要解决循环引用的地方都建议使用<code>weak</code>或者<code>unowned</code>。<code>unowned</code>适用于变量总是有值的情况，<code>weak</code>则是对普通变量使用的。标明<code>unowned</code>的变量在使用过程中一定要确保它是非空的，否则会造成异常。</p>
<h2 id="与Objetive-C混合使用">与Objetive-C混合使用</h2>
<h3 id="1-_模块引用">1. 模块引用</h3>
<p>从OC代码中引用Swift模块，只需要OC文件中引入对应的头文件，示例：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="array">#import </span><span class="string">"TestSwiftApp-Swift.h"</span>
</pre></td></tr></table></figure>

<p>需要注意的是，<code>TestSwiftApp</code>这个前缀是在Build Settings是进行设置的。可以设置对应的<code>Product Module Name</code>来修改（默认是空，所以使用<code>Product Name</code>进行代替）。</p>
<p>如果要在Swift中使用OC代码，则需要在一个名字为<code>#ProductName#-Bridging-Header.h</code>的头文件中引用所有需要暴露给Swift的模块头文件。</p>
<h3 id="2-_与OC_API的结合使用">2. 与OC API的结合使用</h3>
<h4 id="a-_构造函数的差别">a. 构造函数的差别</h4>
<p>OBJECTIVE-C</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="built_in">UITableView</span> *myTableView = [[<span class="built_in">UITableView</span> alloc] initWithFrame:CGRectZero style:UITableViewStyleGrouped];
In Swift, you <span class="keyword">do</span> <span class="keyword">this</span>:
</pre></td></tr></table></figure>

<p>SWIFT</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>let myTableView: <span class="built_in">UITableView</span> = <span class="built_in">UITableView</span>(frame: CGRectZero, style: <span class="variable">.Grouped</span>)
</pre></td></tr></table></figure>

<h4 id="b-_id类型与AnyObject">b. id类型与AnyObject</h4>
<p>挺容易理解，id类型在Swift里面对应的就是AnyObject了。与OC混合使用的时候，难免会遇到NSArray、NSDictionary相互转换的情况，从OC转换过来的数组和字典里面所存的数据都是用AnyObject，转换后可以通过<code>as?</code>进行安全的类型转换。</p>
<h3 id="3-_@objc标记">3. @objc标记</h3>
<p>如果你的类不是继承自NSObject或者OC编写的类，但又想兼容OC，可以使用<code>@objc</code>标记。</p>
<h3 id="4-_内省方法">4. 内省方法</h3>
<p>OC里面可以使用<code>isKindOfClass:</code>之类的方法进行对象的类型判断，Swift中可以直接通过<code>is</code>、<code>as</code>这两个关键字进行代替。</p>
<h3 id="5-_OC混合编程中无法使用的Swift特性">5. OC混合编程中无法使用的Swift特性</h3>
<ul>
<li>Generics：泛型</li>
<li>Tuples：元组</li>
<li>Enumerations defined in Swift：定义在Swift中的枚举类型</li>
<li>Structures defined in Swift：定义在Swift中的值类型</li>
<li>Top-level functions defined in Swift：定义在Swift中的最上层函数？（一些工具类的函数可能会写在一个Swift文件中，但不属于任何类）</li>
<li>Global variables defined in Swift：全局变量</li>
<li>Typealiases defined in Swift：类型别名</li>
<li>Swift-style variadics：Swift的可变参数</li>
<li>Nested types：nested类型</li>
<li>Curried functions：咖喱函数（我的智商暂时不够用，理解不了）</li>
</ul>
<h2 id="似乎有些坑的地方">似乎有些坑的地方</h2>
<p>都已经到Xcode beta3了，Swift开发环境还是一堆堆的坑，下面简单记录一下。</p>
<h3 id="1-_Xcode自动补全没反应，索引服务经常挂掉。">1. Xcode自动补全没反应，索引服务经常挂掉。</h3>
<p>坑爹的是我输入一个<code>for</code>，感觉它应该给我提示自动补全一个for循环吧，结果它竟然给我提示<code>fork()</code>！而且提示里面还没有for循环的选项可以用！</p>
<h3 id="2-_delegate模式的使用">2. delegate模式的使用</h3>
<figure class="highlight swift"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="comment">//@class_protocol protocol ModalViewControllerDelegate {</span>
@objc protocol ModalViewControllerDelegate {
    func modalViewControllerDidClickedDismissButton(viewController: ModalViewController)
}

class ModalViewController: <span class="built_in">UIViewController</span> {
    <span class="comment">// 使用weak关键字意图解决循环引用</span>
    <span class="keyword">weak</span> var delegate: ModalViewControllerDelegate?
    override func viewDidLoad() {
        <span class="keyword">super</span><span class="variable">.viewDidLoad</span>()

        <span class="comment">// Do any additional setup after loading the view.</span>
        <span class="keyword">if</span> let sView = <span class="keyword">self</span><span class="variable">.view</span> {
            sView<span class="variable">.backgroundColor</span> = <span class="built_in">UIColor</span><span class="variable">.lightGrayColor</span>()
            
            <span class="keyword">if</span> let button = <span class="built_in">UIButton</span><span class="variable">.buttonWithType</span>(UIButtonType<span class="variable">.System</span>) as? <span class="built_in">UIButton</span> {
                button<span class="variable">.frame</span> = <span class="built_in">CGRect</span>(x: <span class="number">80</span>, y: <span class="number">210</span>, width: <span class="number">160</span>, height: <span class="number">40</span>)
                button<span class="variable">.setTitle</span>(<span class="string">"Dismiss me"</span>, forState: UIControlState<span class="variable">.Normal</span>)
                button<span class="variable">.addTarget</span>(<span class="keyword">self</span>, action: <span class="string">"buttonClicked:"</span>, forControlEvents: UIControlEvents<span class="variable">.TouchUpInside</span>)
                
                <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.addSubview</span>(button)
            }
        }
    }

    override func didReceiveMemoryWarning() {
        <span class="keyword">super</span><span class="variable">.didReceiveMemoryWarning</span>()
        <span class="comment">// Dispose of any resources that can be recreated.</span>
    }
    
    func buttonClicked(sender: AnyObject) {
        <span class="keyword">self</span><span class="variable">.delegate</span>?<span class="variable">.modalViewControllerDidClickedDismissButton</span>(<span class="keyword">self</span>)
    }
}
</pre></td></tr></table></figure>

<p>使用delegate模式时，一般都会用<code>weak</code>去解决循环引用。但直接使用<code>weak</code>的话，编译器会提示</p>
<blockquote>
<p><code>weak</code> cannot be applied to non-class type <code>xxxx</code></p>
</blockquote>
<p><a href="http://stackoverflow.com/questions/24066304/how-can-i-make-a-weak-protocol-reference-in-pure-swift-w-o-objc" target="_blank">StackOverflow上说这种情况</a>需要对protocol添加关键字<code>@objc</code>或者<code>@class_protocol</code>。但现阶段使用后者的话，运行的时候程序会Crash。这是Bug吧？</p>
<h3 id="3-_[unowned_self]导致崩溃">3. <code>[unowned self]</code>导致崩溃</h3>
<p>OC里面，当我们在使用heap block的时候，会注意到如果在block中对self进行引用的话，很容易会造成循环引用导致的内存泄漏。这时我们会使用<code>__weak</code>关键字解决这问题，例如：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>- (<span class="keyword">void</span>)startPolling {
    __<span class="keyword">weak</span> EOCClass *weakSelf = <span class="keyword">self</span>;
    _pollTimer = [NSTimer eoc_scheduledTimerWithTimeInterval:<span class="number">5.0</span>
                                                       block:^{
                                                    EOCClass *strongSelf = weakSelf;
                                                    [strongSelf p_doPoll];
                                                        }
                                                    repeats:<span class="literal">YES</span>];
}
</pre></td></tr></table></figure>

<p>在Swift中，使用属性或方法返回闭包时，官方文档上说也可以使用<code>unowned</code>关键字解决这问题。用<code>weak</code>的话应该也可以，例如：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="regexp">//</span> 使用unowned
<span class="reserved">var</span> <span class="attribute">asHTML</span>: <span class="function"><span class="params">()</span> -&gt;</span> String = {
    [unowned self] <span class="keyword">in</span>
    <span class="keyword">if</span> <span class="reserved">let</span> text = self.text {
        <span class="keyword">return</span> <span class="string">"&lt;\(self.name)&gt;\(text)&lt;/\(self.name)&gt;"</span>
    } <span class="keyword">else</span> {
        <span class="keyword">return</span> <span class="string">"&lt;\(self.name) /&gt;"</span>
    }
}

<span class="regexp">//</span> 使用weak
<span class="reserved">var</span> <span class="attribute">asHTML</span>: <span class="function"><span class="params">()</span> -&gt;</span> String = {
    [weak self] <span class="keyword">in</span>
    <span class="keyword">if</span> <span class="reserved">let</span> text = self?.text {
        <span class="keyword">return</span> <span class="string">"&lt;\(self?.name)&gt;\(text)&lt;/\(self?.name)&gt;"</span>
    } <span class="keyword">else</span> {
        <span class="keyword">return</span> <span class="string">"&lt;\(self?.name) /&gt;"</span>
    }
}
</pre></td></tr></table></figure>

<p>测试结果暂时显示，使用<code>unowned</code>的话会导致Crash。这估计是坑吧……</p>
<h3 id="4-_多线程">4. 多线程</h3>
<p>用Swift重写了一次PrimeFinder，多线程方面还是可以正常使用GCD提供的功能，就是一些block的生成需要注意一下，把语法改一下就好。</p>
<p>由于Swift里面暂时没找到<code>@synchronized</code>这加锁的语法，可以暂时会用下面的代码代替。用<code>NSLock</code>之类的代替也可以。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>objc_sync_enter(self)
<span class="keyword">...</span>
objc_sync_exit(self)
</pre></td></tr></table></figure>

<p>注意一下加锁的对象就好。在重写的时候发现了一个死锁的情况，例如：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre>class PrimeFinder {
    var primes: [Int] = []
<span class="keyword">...</span>

    func start() {
<span class="keyword">...</span>
        let isPrime: dispatch_block_t = {
            [weak self] <span class="keyword">in</span>
            <span class="keyword">for</span> (var n = <span class="number">2</span>; n &lt; number; n++) {
                <span class="keyword">if</span> ((number % n) == <span class="number">0</span>) {
                    <span class="keyword">return</span>
                }
            }
            
            objc_sync_enter(self?.primes)
            self?.primes.append(number)
            objc_sync_exit(self?.primes)
        }
<span class="keyword">...</span>
    }
}
</pre></td></tr></table></figure>

<p>在加锁的时候使用的是<code>self?.primes</code>可能为空，导致死锁。如果单独使用一个常量<code>let syncObject: NSObject</code>来代替的话则没有问题。另外，block里面使用<code>unowned</code>似乎是一件很危险的事情，经常会出现Crash。</p>
<h3 id="5-_Playground有何用？">5. Playground有何用？</h3>
<p>新建一个Playground文件，里面有所见即所得的编程体验，编写的代码可以立刻从Playground里面反映出来。但是，<a href="http://stackoverflow.com/questions/24045245/how-to-import-own-classes-from-your-own-project-into-a-playground" target="_blank">对于自定义类来说，在Playground里面暂时无法引用</a>。</p>
<p>简单粗暴的方法是：源码复制粘贴到Playground里面再使用。</p>
]]></content>
    
    
      <category term="iOS" scheme="http://blog.edi-c.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://blog.edi-c.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WP8如何引用自定义字体]]></title>
    <link href="http://blog.edi-c.com/post/how-to-import-custom-font-in-wp8.html"/>
    <id>http://blog.edi-c.com/post/how-to-import-custom-font-in-wp8.html</id>
    <published>2014-06-14T15:34:42.000Z</published>
    <updated>2014-06-14T15:52:01.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>最近重操故业，拿起了PS认真做了个App的设计图，然后就是把设计稿转化成App了。由于设计的时候使用了一些系统不存在的字体，所以只好研究怎么引入自定义的字体。</p>
<h2 id="说一下WP里面对字体的一个特殊处理">说一下WP里面对字体的一个特殊处理</h2>
<p>其实刚开始的时候也没有想着使用自定义字体的，毕竟也只是把Segoe这个字体压缩了一下，在PS里面将它设置成了Condensed。结果发现WP开发的时候，把<code>FontStretch</code>设置成<code>Condensed</code>是没有作用的。原因是：设置字体拉伸这个属性，对应的字体必须支持该样式（即需要Segoe Condensed这个字体），如果不支持，则不应用该属性。</p>
<p>于是，只能想想别的方法：把字体打包到应用里面吧。</p>
<h2 id="引入自定义字体">引入自定义字体</h2>
<p>有这么特殊的处理也就算了，在WP7开始可以正常使用的引用自定义字体的方法，在WP8下面竟然不适用。引用方法如下：</p>
<ol>
<li>将字体复制到工程中，建议使用”Fonts”目录存放</li>
<li>将字体文件在工程中的属性设置为Contents</li>
<li>在XAML文件中需要定义字体的地方，使用”Fonts/MyCustomFont.tff#MyCustomFont”这种语法进行引用</li>
</ol>
<p>需要注意的是：#后面的字体名需要自行打开该字体进行查看，字体名不等于文件名。</p>
<p>本来到这里，这文章也就完了，结果引用完了之后发现没有任何效果。于是继续Google，在<a href="http://nicksnettravels.builttoroam.com/post/2013/06/22/TTF-Font-with-Windows-Phone-8.aspx" target="_blank">TTF Font with Windows Phone 8</a>这文章里面，作者也遇到这个问题。他的最终解决方法是：使用<a href="http://birdfont.org/" target="_blank">BirdFont</a>软件修改字体，换个名字之后重新导出就可以正常引用了。该同学也不明白这是为什么。</p>
<p>PS：该文章里面使用的BirdFont原来是不需要收费的，但最新的版本已经是需要购买才能正常使用（不购买的话只能修改SIL协议下的字体）。不过费用也不贵，是以捐赠的形式进行购买的，最低只需要捐赠1美元就可以买到了。</p>
<p>PPS：这样修改过的字体不知道能不能在商业用途中使用，有这样的风险。</p>
]]></content>
    
    
      <category term="wp8" scheme="http://blog.edi-c.com/tags/wp8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[测试一下Google的索引]]></title>
    <link href="http://blog.edi-c.com/post/test-for-google.html"/>
    <id>http://blog.edi-c.com/post/test-for-google.html</id>
    <published>2014-06-07T14:50:45.000Z</published>
    <updated>2014-06-07T14:52:33.000Z</updated>
    <content type="html"><![CDATA[<p>最近把Blog迁移到Github Pages之后，发现好几篇Post都没有及时收录。研究了一下，说是建议添加Sitemap都Google站长工具里面。</p>
<p>添加完之后，发布一篇post测试一下。</p>
]]></content>
    
    
      <category term="web" scheme="http://blog.edi-c.com/tags/web/"/>
    
      <category term="google" scheme="http://blog.edi-c.com/tags/google/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WinRT下ScrollViewer的Manipulation事件如何响应]]></title>
    <link href="http://blog.edi-c.com/post/handle-scrollviewer-manipulation-events-in-winrt.html"/>
    <id>http://blog.edi-c.com/post/handle-scrollviewer-manipulation-events-in-winrt.html</id>
    <published>2014-06-06T04:44:13.000Z</published>
    <updated>2014-06-07T14:36:31.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>WP 8.1发布了，并且官方也宣布了Universal App的开发方式。可以针对Windows 8.1和Windows Phone 8.1的同时开发一个项目。UI部分只需要简单适配一下就可以了，大部分API都是共用的（个人对8.1研究不大深入，这里说的只是个大概的理解，有错误请指正）。</p>
<h2 id="XAML_App和Silverlight_8-1">XAML App和Silverlight 8.1</h2>
<p>8.1环境下面，有个概念要搞清楚：XAML App和Silverlight App不是一回事。虽然大家都用XAML，但8.1 XAML App的UI模型和Silverlight的模型不大一样，而且XAML App支持使用C/C++进行UI编程，这样做起来好像是会对内存控制上好一点。</p>
<p>可惜的是，XAML App暂时还不能完全替代掉Silverlight App，但这肯定是一个趋势。而且看Silverlight App中控件的API在8.1下面基本没有增加（其实我也觉得XAML App里面的控件用起来更爽）。</p>
<h2 id="正题">正题</h2>
<p>说了那么多，下面讲一下这次的正题。在XAML App下，<code>UIElement</code>引入了<code>ManipulationMode</code>的概念。下面是官方解释：</p>
<blockquote>
<p>如果要处理操作事件（例如从您应用程序代码中 UI 元素的 ManipulationStarted），则必须将 ManipulationMode 设置为其他值，而不是 System 或 None。</p>
<p>ManipulationMode 的典型默认值为 System 而不是 None。该值为 System 时，源自该元素的操作可以由根据 直接操作API 的 Windows </p>
<p>]运行时基础结构处理。例如，ScrollViewer 按其控件逻辑处理用户操作，并将它们作为控件的滚动事件处理。System 值还可启用响应操作事件的个性动画。<br>Slider 和 ToggleSwitch 具有默认模板，将 ManipulationMode 值设置为 None，因此，None 将是在设计时所看到的默认值。</p>
<p>指定相关的操作模式<br>你可以在代码或 XAML 中使用所示的逗号语法将多个按标志的 ManipulationModes 值指定为 ManipulationMode 属性的值。例如，可以合并 TranslateX、TranslateY、Rotate 和 Scale，或者它们的任意组合。但是，并非所有组合都有效。仅当特定控件使用 ManipulationModes 后，才会强制实施有效性，因此设置存在的问题（ManipulationModes 的无效组合）不到运行时可能不会出现。不要合并 Translate<em> 值与 TranslateRails</em> 值，因为它们被视为独占值，不合并惯性值与非惯性值。All 值不是所有标志的实际附加值，因此，All 不一定表示所有值的组合有效，或已设置任何特定值。<br>在 Windows 8 上，如果将 ManipulationMode 设置为一个将 System 与其他值组合的值，将会引发异常。从 Windows 8.1 开始，你可以将 System 与其他值结合使用。</p>
</blockquote>
<p>简单理解为：如果我们想要使用<code>Manipulation**</code>事件的话，在使用时必须将该控件的<code>ManipulationMode</code>修改为非<code>System</code>和<code>None</code>，否则系统将会接管触摸事件。</p>
<p>那回到这次的主题，我们想在<code>ScrollViewer</code>上对它作水平方向的平移该怎么做呢？本来我以为只要在ScrollViewer上修改它的<code>ManipulationMode</code>就可以了，结果修改之后，并没有任何反应，绑定的<code>ManipulationDelta</code>事件并不会响应：</p>
<figure class="highlight xaml"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">ScrollViewer</span> <span class="attribute">x:Name</span>=<span class="value">"sv"</span> <span class="attribute">Height</span>=<span class="value">"200"</span> <span class="attribute">ManipulationMode</span>=<span class="value">"TranslateX"</span> <span class="attribute">ManipulationDelta</span>=<span class="value">"UIElement_OnManipulationDelta"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">Border</span> <span class="attribute">Height</span>=<span class="value">"600"</span> <span class="attribute">Background</span>=<span class="value">"Red"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">TextBlock</span>&gt;</span>1<span class="tag">&lt;/<span class="title">TextBlock</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">Border</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ScrollViewer</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UIElement_OnManipulationDelta</span>(<span class="keyword">object</span> sender, ManipulationDeltaRoutedEventArgs e)
{
    Debug.WriteLine(e.Delta.Translation.X);
}
</pre></td></tr></table></figure>

<p>后面想了一下，会不会是因为它的子控件<code>Border</code>上的事件被截获了呢？于是我又改了一下，在<code>Border</code>上绑定了一个<code>ManipulationDelta</code>事件，结果还是没有响应：</p>
<figure class="highlight xaml"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">ScrollViewer</span> <span class="attribute">x:Name</span>=<span class="value">"sv"</span> <span class="attribute">Height</span>=<span class="value">"200"</span> <span class="attribute">ManipulationMode</span>=<span class="value">"TranslateX"</span> <span class="attribute">ManipulationDelta</span>=<span class="value">"UIElement_OnManipulationDelta"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">Border</span> <span class="attribute">Height</span>=<span class="value">"600"</span> <span class="attribute">Background</span>=<span class="value">"Red"</span> <span class="attribute">ManipulationDelta</span>=<span class="value">"BorderOnManipulationDelta"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">TextBlock</span>&gt;</span>1<span class="tag">&lt;/<span class="title">TextBlock</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">Border</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ScrollViewer</span>&gt;</span>
</pre></td></tr></table></figure>

<p>于是我决定修改一下<code>Border</code>的<code>ManipulationMode</code>。发现如果修改成<code>All</code>，那<code>ScrollViewer</code>就无法正常滚动了，坑大发了。再次研读上面关于<code>ManipulationMode</code>的备注，发现这个属性的比较神奇，如果修改成非<code>System</code>外的值，那将由开发者自己去处理对应的触摸事件（这不就跟IE10开始使用那个坑爹属性<code>-ms-touch-action</code>一样吗？！）。不过XAML App里面对这个属性提供了一个神奇的使用方法：属性组合。也就是<code>ManipulationMode</code>这个属性里面，可以将多个模式组合使用。</p>
<p>也就是说<code>ManipulationMode</code>可以接受以下的设置方式：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="setting">ManipulationMode = <span class="value"><span class="string">"TranslateX,TranslateY,Rotate,Scale"</span></span></span>
</pre></td></tr></table></figure>

<p>那这时候<code>Manipulation**</code>事件会在响应的参数里面给出TranslateX\TranslateY\Rotate\Scale等相应的响应值。</p>
<p>回到主题：这属性跟<code>ScrollViewer</code>有什么关系啊？还是有点关系哈，看示例代码：</p>
<figure class="highlight xaml"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">ScrollViewer</span> <span class="attribute">x:Name</span>=<span class="value">"sv"</span> <span class="attribute">Height</span>=<span class="value">"200"</span> <span class="attribute">ManipulationDelta</span>=<span class="value">"UIElement_OnManipulationDelta"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">Border</span> <span class="attribute">Height</span>=<span class="value">"600"</span> <span class="attribute">Background</span>=<span class="value">"Red"</span> <span class="attribute">ManipulationMode</span>=<span class="value">"System, TranslateX"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">TextBlock</span>&gt;</span>1<span class="tag">&lt;/<span class="title">TextBlock</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">Border</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ScrollViewer</span>&gt;</span>
</pre></td></tr></table></figure>

<p>如果我对<code>ScrollViewer</code>的子控件添加<code>ManipulationMode=&quot;System,TranslateX</code>，那就相当于告诉系统：子控件的触摸事件除了水平方向之外，其它的都按照系统默认的响应处理。</p>
<p>这样一来，子控件就不会截获掉水平方向的触摸事件，而我在上层<code>ScrollViewer</code>的触摸事件绑定也可以正常响应了！</p>
<h3 id="备注">备注</h3>
<p>WinRT下面对触摸事件的处理感觉是怪怪的，没有以前直观。像<code>ScrollViewer</code>的触摸事件响应，如果按照此文的方法做处理，只能针对非滚动方向做截获。意思就是：如果你的<code>ScrollViewer</code>需要水平方向的滚动，那你加上对应的<code>ManipulationMode</code>之后，水平方向的触摸就会交给你自己做处理了，也就是！如果你什么都不处理，你的<code>ScrollViewer</code>就没有办法做水平滚动啦！</p>
<p>所以说，此法只适合在非滚动方向上的触摸事件响应。PS：有用过IE上那个<code>touch-action</code>属性的同学应该挺好理解这问题的。</p>
]]></content>
    
    
      <category term="winrt" scheme="http://blog.edi-c.com/tags/winrt/"/>
    
      <category term="wp8.1" scheme="http://blog.edi-c.com/tags/wp8.1/"/>
    
      <category term="xaml" scheme="http://blog.edi-c.com/tags/xaml/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个在Mac上用于快速切换Function Key的Alfred Workflow]]></title>
    <link href="http://blog.edi-c.com/post/functionkey-swithcher-workflow.html"/>
    <id>http://blog.edi-c.com/post/functionkey-swithcher-workflow.html</id>
    <published>2014-06-03T05:37:51.000Z</published>
    <updated>2014-06-07T14:36:31.000Z</updated>
    <content type="html"><![CDATA[<p>最近切换到iOS开发上，每天都在忍受着Xcode和VS之间的异同。Mac上有一些比较脑残的设置（虽然有时候会觉得挺方便）。不过对开发者影响比较大的还是Debug的时候，键盘顶部的Function Keys默认被设置成了OS X上的一些快捷方式。</p>
<p>虽然，MAS（Mac App Store）上有一款可以自动切换Function Key的软件（叫Puala），有兴趣可以自行下载（￥6）。不过Apple提供了AppleScript，可以对OS X系统、GUI等进行编程，快速实现想要的功能。本来是想自己写一个简单的脚本做处理的，结果查阅了一下各大网站，有人已经写过了。我就简单封装成Alfred Workflow，需要的同学自行下载安装。</p>
<p>使用方法：呼出Alfred之后，输入swfn回车即可将按钮功能切换成标准的Function Key。</p>
<p><a href="https://www.dropbox.com/s/ptdtvpsoa1gwzm2/Switch%20FunctionKeys.alfredworkflow" target="_blank">点击下载</a>。</p>
]]></content>
    
    
      <category term="mac" scheme="http://blog.edi-c.com/tags/mac/"/>
    
      <category term="alfred" scheme="http://blog.edi-c.com/tags/alfred/"/>
    
      <category term="workflow" scheme="http://blog.edi-c.com/tags/workflow/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Effective Objective-C 阅读记录]]></title>
    <link href="http://blog.edi-c.com/post/effective-objetive-c-note.html"/>
    <id>http://blog.edi-c.com/post/effective-objetive-c-note.html</id>
    <published>2014-05-24T04:31:59.000Z</published>
    <updated>2014-06-07T14:36:31.000Z</updated>
    <content type="html"><![CDATA[<p>关键的最佳实践：</p>
<h2 id="第一章：了解OC">第一章：了解OC</h2>
<ol>
<li>Item 2: 减少头文件的引用：在.h文件中添加#import的时候，其它文件引用此.h文件时也会导入其它的头文件。此时可以使用@class转发声明，然后在.m中再引入该类的头文件。简单地说就是只在Implementation中进行头文件的引用，减少多重引用。使用这种方法声明的时候，如果外部需要访问该类的方法/属性，则需要再引用该类的头文件，否则会报错。</li>
<li>Item 4: 常量使用类型常量定义更好，减少使用宏定义。因为在头文件中定义宏的话，所有引用它的地方都会进行宏替换，相当于添加了一些不必要的暴露。</li>
</ol>
<h2 id="第二章：对象、消息和运行时">第二章：对象、消息和运行时</h2>
<ol>
<li>Item 9: 学会使用类簇，更好地 封装不同的数据和逻辑（书中介绍的是抽象类的使用）</li>
<li>Item 11: 理解objc_msgSend的作用<ul>
<li>OC中函数调用的流程中会应用到动态绑定</li>
<li>OC中的函数调用声明，最终都是使用objc_msgSend()函数进行消息发送的。</li>
</ul>
</li>
<li><p>Item 12: 理解消息转发的过程</p>
<ul>
<li>当一个对象接收一个它不明白的方法，对象会开始消息转发，根据对象的继承关系进行消息转发，最终传递至根对象（一般是NSObject）。如果找不到实现的方法，则Runtime最终会抛出异常。</li>
<li>消息转发有两种途径。<ul>
<li>动态方法解析：当一个对接收到了一个未知的类方法 调用时，对象会执行resolveInstanceMethod进行方法的动态解析，此时会在类中查找已经实现的接口。（必须注意，调用的方法一定要有实现，否则会失败进入第二阶段的查找）</li>
<li>接收者替换：当动态查找无法找到指定Selector方法时，接收者可以指定一个方法替换者进行消息转发。具体会使用forwardingTargetForSelector这个方法。</li>
<li>完全转发机制（Full Forwarding Mechanism）：触发此机制时，Runtime会创建一个NSInvocation对象（内含Selector\Object\Arguments），使用forwardInvocation进行对象的转发，最终成功调用时可以直接对NSInvocation对象进行Invoke</li>
</ul>
</li>
</ul>
</li>
<li><p>Item 12: 消息转发过程中，Selector对应的名字有可能发生改变。</p>
</li>
<li>Item 14: 理解OC中的Class Object：OC中的对象声明基本都是使用指针，对象比较时优先使用内省函数，避免部分对象重写了消息转发流程引发错误的消息转发。</li>
</ol>
<h3 id="第三章：接口和API设计">第三章：接口和API设计</h3>
<ol>
<li>Item 15: 使用正确的前缀，避免使用命名空间。因为OC中并不存在命名空间的概念，因此如果前缀使用不正确，将会导致程序链接出错（函数符号名称有可能发生重复，导致链接错误）。即使是没有在头文件中声明的函数，也会出现在符号表中的（本来就没有private的概念）。</li>
<li>Item 17: 重写description方法可以方便输出对象的信息</li>
<li>Item 21: 理解OC的异常模型：即使使用ARC的情况下，应用执行时如果抛出异常信息，则异常对象前的资源不会正常释放，容易造成内存泄漏。建议是使用NSError进行普通异常信息传递，出现严重异常时才向外抛出NSException。使用NSError时，需要在API中传入NSError对象。</li>
<li>Item 22: 理解NSCopying协议：实现NSCopying协议时，建议都是重写copyWithZone:，而且需要仔细检查对象内部的变量是需要浅复制还是深复制。</li>
</ol>
<h2 id="第四章：协议和分类">第四章：协议和分类</h2>
<ol>
<li>Item 23: 对象间通信请使用Delegate或Data Source Protocols：使用delegate时，注意声明过程中必须将delegate声明为weak，否则会造成循环引用。</li>
<li>Item 27: 使用class-continuation category来隐藏实现细节。</li>
<li>Item 28: 使用协议来提供匿名对象（暂时未明白怎么做）</li>
</ol>
<h2 id="第五章：内存管理">第五章：内存管理</h2>
<ol>
<li>Item 29: 理解引用计数。</li>
<li>Item 31: 只在dealloc中进行引用解除和KVO清理。如果一个对象持有了系统资源（如文件描述符），则此类对象应该有一个统一的cleanup\close接口，便于调用它的对象在使用完成后释放相关的系统资源。另外，不建议在dealloc方法中调用当前对象的方法，因为当前对象在进入dealloc时一般处于生命周期要结束的时候，调用其它方法有可能在方法未完成调用的时候出现对象被回收的情况，导致应用crash。</li>
<li>Item 32: 注意异常处理流程时的内存管理。在ARC下，我们会以为try/catch语句在使用时，系统会自动处理掉异常抛出前的对象释放，实际不会！而且在ARC下，我们不能在finally语句中手动调用release方法，这样会导致明显的内存泄漏（这不是Bug吗？！）。EOC建议是使用NSError代替大部分NSException，如果真的需要捕获异常，则建议打开-fobjc-arc-exceptions。</li>
<li>Item 33: 使用弱引用避免发生循环引用。</li>
<li>Item 35: 使用僵尸对象来帮助调试内存问题。Cocoa框架有一个“僵尸”特性，当调试启用时，</li>
</ol>
<h2 id="第六章：block和GCD">第六章：block和GCD</h2>
<ol>
<li>Item 37: 理解block。block跟C#里面的委托差不多，定义之后会引用作用域外的变量。需要注意的是：<ul>
<li>block中引用的外部变量不能在block中进行修改（除非变量声明为__block）。</li>
<li>block的声明一般是分配在栈上，如果在if/else语句（即不同的作用域中）进行block的赋值，则有可能造成函数调用出错。如果真要这样使用，建议在赋值时添加copy，将block分配到堆中（此时则需要注意block的生命周期）。</li>
<li>如果block在定义的时候没有捕获到任何外部变量，则block会转化成全局block。全局block永远不会回收（单例对象）。</li>
</ul>
</li>
<li>Item 38: 使用typedefs来定义常用block类型。例子：<figure class="highlight objective-c"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">typedef</span> <span class="keyword">int</span>(^EOCSomeBlock)(<span class="built_in">BOOL</span> flag, <span class="keyword">int</span> value);  
EOCSomeBlock block = ^(<span class="built_in">BOOL</span> flag, <span class="keyword">int</span> value){ <span class="comment">// implementation };</span>
</pre></td></tr></table></figure></li>
<li>Item 42: 使用GCD替代performSelector及其相关。在if/else语句中为selector进行赋值，有可能会导致在ARC环境下面出现内存泄漏。原因是在if/else中使用selector时，编译器不确定selector的类型，进而无法确定performSelector能否正常执行，使得ARC不知道该 对象能否正常释放导致编译时没有添加release语句，导致了泄漏。</li>
<li>Item 43: 合理使用GCD和Operation Queue。原因：<ul>
<li>使用NSOperation的时候，可以通过设置内部的标识来中止任务，但GCD只要加入队列后就无法取消（Fire and Forget）。</li>
<li>任务间依赖。NSOperation可以设置不同的任务间有依赖关系。</li>
<li>Key-Value观察。</li>
<li>任务优先级。NSOperation可以设置优先级，通过优先级的设置来调整任务的顺序。GCD没有现成的方法来达到这一目的，它的优先级设置是面对整个任务队列的，无法设置队列内每个block独自的优先级。</li>
<li>重用性。除非你使用了SDK提供的NSOperation子类（如NSBlockOperation），否则你需要自己实现一个子类。</li>
</ul>
</li>
<li>Item 44: 使用Dispatch Group。（未明白到底有什么具体好处）</li>
<li>Item 45: 使用dispatch_once 来进行线程安全一次性代码执行。具体应用在单例模式中。</li>
<li>Item 46: 避免使用dispatch_get_current_queue。原因是在使用dispatch_sync的时候如果发生dispatch_get_current_queue，将会导致死锁。（不知道理解得对不对，因为书里面介绍的情况比较多）。</li>
</ol>
<h2 id="第7章_-_系统框架">第7章 - 系统框架</h2>
<ol>
<li>Item 48: 使用迭代器块取代for循环。<ul>
<li>快速迭代。类似C#里面的foreach，只要使用for-in语法即可，用来遍历NSArray比较方便。</li>
<li>使用block进行遍历。内建的几个集合类都支持使用block进行遍历，这样遍历的时候有时会比使用for-in更方便。还支持使用NSEnumerationOptions进行反向遍历或并行遍历。</li>
</ul>
</li>
<li>Item 49: Use toll-free bridging for collections with custom memory-management semantics（不是很明白在说什么）<ul>
<li>__bridge：ARC仍然对该OC对象有拥有权。</li>
<li>__bridge_retained：ARC将拥有权交出（后续处理需要用户自行释放，使用CFRelease）</li>
<li>__bridge_transfer：将拥有权交给ARC</li>
</ul>
</li>
<li>Item 50: 使用NSCache代替NSDictionary作为缓存。</li>
<li>Item 51: 让initialize和load的函数实现保持简洁。</li>
<li>Item 52: NSTimer会保持对象的引用。如果一个对象内建NSTimer，Timer本身对该对象有引用，则会引发循环引用。导致对象本身在外部引用移除后，仍然不能被释放。使用block可以一定程度上解决这问题。使用Category拓展NSTimer，添加一个使用block的静态方法。</li>
</ol>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[将我的Blog迁移到Github Pages上了]]></title>
    <link href="http://blog.edi-c.com/post/move-my-blog-to-github.html"/>
    <id>http://blog.edi-c.com/post/move-my-blog-to-github.html</id>
    <published>2014-05-23T17:35:02.000Z</published>
    <updated>2014-06-07T14:36:31.000Z</updated>
    <content type="html"><![CDATA[<p>一直觉得Scriptogr.am的服务很不稳定，特别是使用了DNSPod的提示之后，经常收到DNSPod发来的宕机提醒。最近受附近的小哥影响，终于下决心把Blog迁移到Github上了。</p>
<p>使用的静态博客程序是Hexo，生成速度不错。暂时还是使用别人制作的博客主题，过段时间慢慢修改吧。</p>
<p>不早了，该睡觉了。</p>
]]></content>
    
    
      <category term="diary" scheme="http://blog.edi-c.com/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用mklink迁移Windows Phone SDK的模拟器镜像]]></title>
    <link href="http://blog.edi-c.com/post/using-mklink-to-migrate-windows-phone-emulator-images.html"/>
    <id>http://blog.edi-c.com/post/using-mklink-to-migrate-windows-phone-emulator-images.html</id>
    <published>2014-02-27T03:47:00.000Z</published>
    <updated>2014-05-23T17:13:58.000Z</updated>
    <content type="html"><![CDATA[<p>自从Windows 7引入mklink命令后，再也不用担心系统盘的空间不足了。本来我个人对所有要安装的软件的态度都是放在系统盘里面的，毕竟系统重装之后软件基本都要重装，而且即使安装的时候使用别的盘，安装程序仍然会把部分数据放到系统盘内。但是后来却出现了开发环境占用硬盘空间太多的问题（还是因为系统分区分得太小了），于是开始把部分开发环境的数据迁移到另外的分区里面。</p>
<p>模拟器镜像的位置在<code>C:\Program Files (x86)\Microsoft SDKs\Windows Phone</code>，主要占空间的几个大头都是v8.x里面的Emulator目录。迁移的时候只需把目录剪切到别的分区中，然后运行下面的命令建立对应目录的符号链接即可。由于GDR2和GDR3目录下面都只存放了模拟器镜像，所以下面的命令中是直接对这两个目录进行符号链接。</p>
<p>示例（请使用管理员权限运行）：</p>
<pre><code>mklink /D "C:<span class="command">\Program</span> Files (x86)<span class="command">\Microsoft</span> SDKs<span class="command">\Windows</span> Phone<span class="command">\v</span>8.0<span class="command">\Emulator</span>" "D:<span class="command">\Program</span> Files (x86)<span class="command">\Microsoft</span> SDKs<span class="command">\Windows</span> Phone<span class="command">\v</span>8.0<span class="command">\Emulator</span>"
mklink /D "C:<span class="command">\Program</span> Files (x86)<span class="command">\Microsoft</span> SDKs<span class="command">\Windows</span> Phone<span class="command">\v</span>8.0GDR2" "D:<span class="command">\Program</span> Files (x86)<span class="command">\Microsoft</span> SDKs<span class="command">\Windows</span> Phone<span class="command">\v</span>8.0GDR2"
mklink /D "C:<span class="command">\Program</span> Files (x86)<span class="command">\Microsoft</span> SDKs<span class="command">\Windows</span> Phone<span class="command">\v</span>8.0GDR3" "D:<span class="command">\Program</span> Files (x86)<span class="command">\Microsoft</span> SDKs<span class="command">\Windows</span> Phone<span class="command">\v</span>8.0GDR3"
mklink /D "C:<span class="command">\Users</span><span class="command">\xxx</span><span class="command">\AppData</span><span class="command">\Local</span><span class="command">\Microsoft</span><span class="command">\XDE</span>" "D:<span class="command">\AppData</span><span class="command">\Local</span><span class="command">\Microsoft</span><span class="command">\XDE</span>"
</code></pre><p>相关资料：</p>
<ol>
<li><a href="http://technet.microsoft.com/zh-cn/library/cc753194(v=ws.10" target="_blank">关于mklink命令</a>.aspx)</li>
<li><a href="http://technet.microsoft.com/zh-cn/library/cc754077(v=WS.10" target="_blank">关于符号链接</a>.aspx)</li>
</ol>
]]></content>
    
    
      <category term="wp8" scheme="http://blog.edi-c.com/tags/wp8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[几个C#单例模式的Snippet]]></title>
    <link href="http://blog.edi-c.com/post/some-csharp-singleton-snippets.html"/>
    <id>http://blog.edi-c.com/post/some-csharp-singleton-snippets.html</id>
    <published>2014-01-23T10:31:00.000Z</published>
    <updated>2014-05-23T17:03:28.000Z</updated>
    <content type="html"><![CDATA[<p>其实本来不大想做这几个Snippet，但是看了一下ReSharper里面的Template Explorer实在是用起来怪怪的，官方文档又说得不清不楚的。只好先从VS里面自带的模板弄出几个Snippet，模仿着写了四个Singleton，下面贴一下吧。</p>
<ol>
<li><p>静态初始化单例</p>
<pre><code> <span class="pi">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
 <span class="tag">&lt;<span class="title">CodeSnippets</span>  <span class="attribute">xmlns</span>=<span class="value">"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet"</span>&gt;</span>
     <span class="tag">&lt;<span class="title">CodeSnippet</span> <span class="attribute">Format</span>=<span class="value">"1.0.0"</span>&gt;</span>
         <span class="tag">&lt;<span class="title">Header</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Title</span>&gt;</span>Static Singleton<span class="tag">&lt;/<span class="title">Title</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Shortcut</span>&gt;</span>ston<span class="tag">&lt;/<span class="title">Shortcut</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Description</span>&gt;</span>Code snippet for singleton<span class="tag">&lt;/<span class="title">Description</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Author</span>&gt;</span>chaoming.edc<span class="tag">&lt;/<span class="title">Author</span>&gt;</span>
             <span class="tag">&lt;<span class="title">SnippetTypes</span>&gt;</span>
                 <span class="tag">&lt;<span class="title">SnippetType</span>&gt;</span>Expansion<span class="tag">&lt;/<span class="title">SnippetType</span>&gt;</span>
             <span class="tag">&lt;/<span class="title">SnippetTypes</span>&gt;</span>
         <span class="tag">&lt;/<span class="title">Header</span>&gt;</span>
         <span class="tag">&lt;<span class="title">Snippet</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Declarations</span>&gt;</span>
                 <span class="tag">&lt;<span class="title">Literal</span> <span class="attribute">Editable</span>=<span class="value">"false"</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">ID</span>&gt;</span>classname<span class="tag">&lt;/<span class="title">ID</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">ToolTip</span>&gt;</span>Class name<span class="tag">&lt;/<span class="title">ToolTip</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">Function</span>&gt;</span>ClassName()<span class="tag">&lt;/<span class="title">Function</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">Default</span>&gt;</span>ClassNamePlaceholder<span class="tag">&lt;/<span class="title">Default</span>&gt;</span>
                 <span class="tag">&lt;/<span class="title">Literal</span>&gt;</span>
             <span class="tag">&lt;/<span class="title">Declarations</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Code</span> <span class="attribute">Language</span>=<span class="value">"csharp"</span>&gt;</span><span class="cdata">&lt;![CDATA[/// &lt;summary&gt;
     /// 静态初始化，依赖CLR实现线程安全的实例初始化
     /// &lt;/summary&gt;
     private static readonly $classname$ instance = new $classname$();
     private $classname$() { }
     public static $classname$ Instance
     {
         get
         {
             return instance;
         }
     }
     $end$]]&gt;</span>
             <span class="tag">&lt;/<span class="title">Code</span>&gt;</span>
         <span class="tag">&lt;/<span class="title">Snippet</span>&gt;</span>
     <span class="tag">&lt;/<span class="title">CodeSnippet</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">CodeSnippets</span>&gt;</span>
</code></pre></li>
<li><p>Double-Check单例</p>
<pre><code> <span class="pi">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
 <span class="tag">&lt;<span class="title">CodeSnippets</span>  <span class="attribute">xmlns</span>=<span class="value">"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet"</span>&gt;</span>
     <span class="tag">&lt;<span class="title">CodeSnippet</span> <span class="attribute">Format</span>=<span class="value">"1.0.0"</span>&gt;</span>
         <span class="tag">&lt;<span class="title">Header</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Title</span>&gt;</span>Double-Check Singleton<span class="tag">&lt;/<span class="title">Title</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Shortcut</span>&gt;</span>dston<span class="tag">&lt;/<span class="title">Shortcut</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Description</span>&gt;</span>Code snippet for singleton<span class="tag">&lt;/<span class="title">Description</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Author</span>&gt;</span>chaoming.edc<span class="tag">&lt;/<span class="title">Author</span>&gt;</span>
             <span class="tag">&lt;<span class="title">SnippetTypes</span>&gt;</span>
                 <span class="tag">&lt;<span class="title">SnippetType</span>&gt;</span>Expansion<span class="tag">&lt;/<span class="title">SnippetType</span>&gt;</span>
             <span class="tag">&lt;/<span class="title">SnippetTypes</span>&gt;</span>
         <span class="tag">&lt;/<span class="title">Header</span>&gt;</span>
         <span class="tag">&lt;<span class="title">Snippet</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Declarations</span>&gt;</span>
                 <span class="tag">&lt;<span class="title">Literal</span> <span class="attribute">Editable</span>=<span class="value">"false"</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">ID</span>&gt;</span>classname<span class="tag">&lt;/<span class="title">ID</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">ToolTip</span>&gt;</span>Class name<span class="tag">&lt;/<span class="title">ToolTip</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">Function</span>&gt;</span>ClassName()<span class="tag">&lt;/<span class="title">Function</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">Default</span>&gt;</span>ClassNamePlaceholder<span class="tag">&lt;/<span class="title">Default</span>&gt;</span>
                 <span class="tag">&lt;/<span class="title">Literal</span>&gt;</span>
             <span class="tag">&lt;/<span class="title">Declarations</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Code</span> <span class="attribute">Language</span>=<span class="value">"csharp"</span>&gt;</span><span class="cdata">&lt;![CDATA[private static object syncRoot = new object();
     private static $classname$ instance;
     private $classname$() { }

     /// &lt;summary&gt;
     /// Double-Check Singleton
     /// &lt;/summary&gt;
     public static $classname$ Instance
     {
         get
         {
             if(instance == null)
             {
                 lock(syncRoot)
                 {
                     if(instance == null)
                     {
                         instance = new $classname$();
                     }
                 }
             }
             return instance;
         }
     }
     $end$]]&gt;</span>
             <span class="tag">&lt;/<span class="title">Code</span>&gt;</span>
         <span class="tag">&lt;/<span class="title">Snippet</span>&gt;</span>
     <span class="tag">&lt;/<span class="title">CodeSnippet</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">CodeSnippets</span>&gt;</span>
</code></pre></li>
<li><p>Nested单例</p>
<pre><code> <span class="pi">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
 <span class="tag">&lt;<span class="title">CodeSnippets</span>  <span class="attribute">xmlns</span>=<span class="value">"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet"</span>&gt;</span>
     <span class="tag">&lt;<span class="title">CodeSnippet</span> <span class="attribute">Format</span>=<span class="value">"1.0.0"</span>&gt;</span>
         <span class="tag">&lt;<span class="title">Header</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Title</span>&gt;</span>Nested Singleton<span class="tag">&lt;/<span class="title">Title</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Shortcut</span>&gt;</span>nston<span class="tag">&lt;/<span class="title">Shortcut</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Description</span>&gt;</span>Code snippet for singleton<span class="tag">&lt;/<span class="title">Description</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Author</span>&gt;</span>chaoming.edc<span class="tag">&lt;/<span class="title">Author</span>&gt;</span>
             <span class="tag">&lt;<span class="title">SnippetTypes</span>&gt;</span>
                 <span class="tag">&lt;<span class="title">SnippetType</span>&gt;</span>Expansion<span class="tag">&lt;/<span class="title">SnippetType</span>&gt;</span>
             <span class="tag">&lt;/<span class="title">SnippetTypes</span>&gt;</span>
         <span class="tag">&lt;/<span class="title">Header</span>&gt;</span>
         <span class="tag">&lt;<span class="title">Snippet</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Declarations</span>&gt;</span>
                 <span class="tag">&lt;<span class="title">Literal</span> <span class="attribute">Editable</span>=<span class="value">"false"</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">ID</span>&gt;</span>classname<span class="tag">&lt;/<span class="title">ID</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">ToolTip</span>&gt;</span>Class name<span class="tag">&lt;/<span class="title">ToolTip</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">Function</span>&gt;</span>ClassName()<span class="tag">&lt;/<span class="title">Function</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">Default</span>&gt;</span>ClassNamePlaceholder<span class="tag">&lt;/<span class="title">Default</span>&gt;</span>
                 <span class="tag">&lt;/<span class="title">Literal</span>&gt;</span>
             <span class="tag">&lt;/<span class="title">Declarations</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Code</span> <span class="attribute">Language</span>=<span class="value">"csharp"</span>&gt;</span><span class="cdata">&lt;![CDATA[private $classname$() { }
     public static $classname$ Instance
     {
         get
         {
             return Nested.instance;
         }
     }

     private class Nested
     {
         // Explicit static constructor to tell C# compiler
         // not to mark type as before field init
         static Nested()
         {
         }

         internal static readonly $classname$ instance = new $classname$();
     }
     $end$]]&gt;</span>
             <span class="tag">&lt;/<span class="title">Code</span>&gt;</span>
         <span class="tag">&lt;/<span class="title">Snippet</span>&gt;</span>
     <span class="tag">&lt;/<span class="title">CodeSnippet</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">CodeSnippets</span>&gt;</span>
</code></pre></li>
<li><p>Lazy<T>单例</p>
<pre><code> <span class="pi">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
 <span class="tag">&lt;<span class="title">CodeSnippets</span>  <span class="attribute">xmlns</span>=<span class="value">"http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet"</span>&gt;</span>
     <span class="tag">&lt;<span class="title">CodeSnippet</span> <span class="attribute">Format</span>=<span class="value">"1.0.0"</span>&gt;</span>
         <span class="tag">&lt;<span class="title">Header</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Title</span>&gt;</span>Lazy Static Singleton<span class="tag">&lt;/<span class="title">Title</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Shortcut</span>&gt;</span>lston<span class="tag">&lt;/<span class="title">Shortcut</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Description</span>&gt;</span>Code snippet for singleton<span class="tag">&lt;/<span class="title">Description</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Author</span>&gt;</span>chaoming.edc<span class="tag">&lt;/<span class="title">Author</span>&gt;</span>
             <span class="tag">&lt;<span class="title">SnippetTypes</span>&gt;</span>
                 <span class="tag">&lt;<span class="title">SnippetType</span>&gt;</span>Expansion<span class="tag">&lt;/<span class="title">SnippetType</span>&gt;</span>
             <span class="tag">&lt;/<span class="title">SnippetTypes</span>&gt;</span>
         <span class="tag">&lt;/<span class="title">Header</span>&gt;</span>
         <span class="tag">&lt;<span class="title">Snippet</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Declarations</span>&gt;</span>
                 <span class="tag">&lt;<span class="title">Literal</span> <span class="attribute">Editable</span>=<span class="value">"false"</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">ID</span>&gt;</span>classname<span class="tag">&lt;/<span class="title">ID</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">ToolTip</span>&gt;</span>Class name<span class="tag">&lt;/<span class="title">ToolTip</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">Function</span>&gt;</span>ClassName()<span class="tag">&lt;/<span class="title">Function</span>&gt;</span>
                     <span class="tag">&lt;<span class="title">Default</span>&gt;</span>ClassNamePlaceholder<span class="tag">&lt;/<span class="title">Default</span>&gt;</span>
                 <span class="tag">&lt;/<span class="title">Literal</span>&gt;</span>
             <span class="tag">&lt;/<span class="title">Declarations</span>&gt;</span>
             <span class="tag">&lt;<span class="title">Code</span> <span class="attribute">Language</span>=<span class="value">"csharp"</span>&gt;</span><span class="cdata">&lt;![CDATA[/// &lt;summary&gt;
     /// 静态初始化，依赖CLR实现线程安全的实例初始化，利用Lazy&lt;T&gt;实现懒初始化，但需要.NET4以上支持
     /// &lt;/summary&gt;
     private static readonly Lazy&lt;$classname$&gt; instance = new Lazy&lt;$classname$&gt;(() =&gt; new $classname$());
     private $classname$() { }
     public static $classname$ Instance
     {
         get
         {
             return instance.Value;
         }
     }
     $end$]]&gt;</span>
             <span class="tag">&lt;/<span class="title">Code</span>&gt;</span>
         <span class="tag">&lt;/<span class="title">Snippet</span>&gt;</span>
     <span class="tag">&lt;/<span class="title">CodeSnippet</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">CodeSnippets</span>&gt;</span>
</code></pre></li>
</ol>
<p>下载链接：<a href="https://www.dropbox.com/s/nfreaxro1jzsb80/Singleton%20Snippets.7z" target="_blank">https://www.dropbox.com/s/nfreaxro1jzsb80/Singleton%20Snippets.7z</a></p>
]]></content>
    
    
      <category term="csharp" scheme="http://blog.edi-c.com/tags/csharp/"/>
    
      <category term="dev" scheme="http://blog.edi-c.com/tags/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows 8.1与镁光M4 SSD固件Bug]]></title>
    <link href="http://blog.edi-c.com/post/windows8-and-micron-m4-ssd-firmware-bug.html"/>
    <id>http://blog.edi-c.com/post/windows8-and-micron-m4-ssd-firmware-bug.html</id>
    <published>2014-01-20T07:20:00.000Z</published>
    <updated>2014-05-23T17:03:57.000Z</updated>
    <content type="html"><![CDATA[<p>最近家里的机器经常出现休眠之后无法开机的问题，刚开始的时候以为BIOS里面设置有问题，重置了一下发现还是会出现类似的问题。于是开始怀疑是不是硬盘的问题，然后想起上次刷SSD固件时候已经大半年之前了。查了一下镁光官网的固件更新，发现M4的固件又更新了好几次。最近一次更新说明里面有这么一段：</p>
<blockquote>
<p>该固件解决了一个电源时序问题，该问题可能会导致电脑从休眠会睡眠状态唤醒时引起固态硬盘挂起，导致无法与主机进行通信（丢盘现象）。</p>
</blockquote>
<p>于是去<a href="http://www.crucial.com/support/firmware.aspx" target="_blank">镁光官网查找一下新的固件</a>，下载更新程序之后在Windows下直接更新即可。</p>
<p>PS：但是更新程序在更新过程里面有可能提示更新失败，然后重启之后却发现固件版本号变了。只能当作更新成功了吧~</p>
<p>更新完固件之后还以为Bug已经修复了，结果后面又出现了两次死机，关机之后系统就出问题了。本来想重装系统，但手上又没有完整的安装盘，于是只能跑一下<code>sfc</code>尝试修复。相关链接：<a href="http://support.microsoft.com/kb/929833" target="_blank">使用系统文件检查器工具修复丢失或损坏的系统文件</a>。</p>
<p>在运行<code>sfc /scannow</code>之后，提示<code>urlmon.dll</code>无法修复（有的时候需要打开C:\Windows\Logs\CBS\CBS.log，搜索文件中记录文件无法修复的日志项，查出损坏的文件）。在Windows 8.1下面，如果这个文件损坏了，系统里面很多程序都会出现无法启动的情况，像IE、搜索、Metro系统设置等。按照文章里面的修复方法，关键的三个命令是：</p>
<ul>
<li>取得损坏系统文件的管理权：<code>takeown /f Path_And_File_Name</code></li>
<li>授予管理员对已损坏系统文件的完全访问权限：<code>icacls Path_And_File_Name /GRANT ADMINISTRATORS:F</code></li>
<li>将损坏的系统文件替换为已知完好的文件副本：<code>Copy Source_File Destination</code></li>
</ul>
<p>远程控制之后终于修复了，在此记录一下。</p>
]]></content>
    
    
      <category term="system" scheme="http://blog.edi-c.com/tags/system/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Flexbox 布局简述]]></title>
    <link href="http://blog.edi-c.com/post/flexbox-layout.html"/>
    <id>http://blog.edi-c.com/post/flexbox-layout.html</id>
    <published>2013-08-29T08:10:00.000Z</published>
    <updated>2014-05-23T17:04:33.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Flexbox_布局简述">Flexbox 布局简述</h1>
<p>Flexbox 布局将有下面一系列的属性设置：</p>
<ul>
<li>flex-basis</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex</li>
<li>align-items</li>
<li>align-self</li>
<li>align-content</li>
<li>order</li>
<li>justify-content</li>
<li>flex-wrap</li>
</ul>
<h2 id="flex\flex-grow\flex-shrink\flex-basis">flex\flex-grow\flex-shrink\flex-basis</h2>
<p><code>flex</code> 属性是 <code>flex-grow</code>\<code>flex-shrink</code>\<code>flex-basis</code> 的速写。下面先讲述一下这一系列的属性。</p>
<h3 id="flex-basis">flex-basis</h3>
<blockquote>
<p>作用：设置弹性项目的初始宽度。<br>初始值：auto<br>可接受的值：非负数，单位可以为CSS提供的长度单位</p>
</blockquote>
<p>效果图如下：</p>
<p><a href="http://d.pr/i/mluE" target="_blank"><img src="http://d.pr/i/mluE.png" alt="flex-basis"></a></p>
<h3 id="flex-grow">flex-grow</h3>
<blockquote>
<p>作用：设置弹性项目宽度比例系数。<em>flex grow</em>设置后将根据外容器剩余宽度和弹性项目的数量来分配对应弹性项目的宽度。<br>初始值：0<br>可接受的值：非负数</p>
</blockquote>
<p>效果图如下：</p>
<p><a href="http://d.pr/i/8Uie" target="_blank"><img src="http://d.pr/i/8Uie.png" alt="flex-grow"></a></p>
<p>外层 flex 容器宽度为 600px，<code>.dodgerBlue</code>的系数设置为2，<code>.limeGreen</code>的系数设置为1。则布局后<code>.dodgerBlue</code>的宽度为200px，<code>.limeGreen</code>宽度为100px。弹性项目按比例均分外层容器的宽度。</p>
<p>值得一提的是，如果弹性项目设置有宽度或者<code>flex-basis</code>，布局时顺序将变化为：先按项目本身设定的宽度或 flex-basis 进行布局，再在剩余空间中根据 flex-grow 系数进行剩余空间分配（在元素内包含文字时弹性项目的大小也会发生变化，具体分配规则暂时还不清楚）。效果图如下（<code>.dodgerBlue</code>的初始宽度为200px，<code>.limeGreen</code>没有设置初始宽度）：</p>
<p><a href="http://d.pr/i/iaDC" target="_blank"><img src="http://d.pr/i/iaDC.png" alt="flex-grow-and-flex-basis"></a></p>
<h3 id="flex-shrink">flex-shrink</h3>
<blockquote>
<p>作用：设置弹性项目压缩比例系数。<em>flex shrink</em>设置后将根据外容器本身宽度和弹性项目的数量来分配对应弹性项目的宽度。<br>初始值：0<br>可接受的值：非负数</p>
</blockquote>
<p>与 <code>flex-grow</code> 相反，<code>flex-shrink</code>在基于弹性项目本身的宽度上再对其宽度按系数进行压缩，具体分配规则暂时确定是：在 <code>flex-basis</code> 存在的情况下，按照 <code>flex-shrink</code> 的值确定弹性项目的分配比例，如外层容器为100px，<code>.dodgerBlue</code> 宽度为100%、压缩系数为3，<code>limeGreen</code> 宽度也为100%、压缩系数为1。此时按照压缩系数对弹性项目的宽度进行重新分配，则 <code>.dodgerBlue</code> 需要压缩100px/4*3=75px，最终宽度为25px。</p>
<p>需要注意的是，在 IE10 下，弹性项目的表现与 <code>flex-shrink:0</code> 效果相同，即 <code>flex-shrink:0</code> 时项目本身不进行宽度压缩。</p>
<p>示例代码：</p>
<pre><code><span class="class">.dodgerBlue</span><span class="rules">{
    <span class="rule"><span class="attribute">background</span>:<span class="value"> dodgerBlue</span></span>;
    <span class="rule"><span class="attribute">flex-basis</span>:<span class="value"><span class="number">100</span>%</span></span>;
    <span class="rule"><span class="attribute">flex-shrink</span>:<span class="value"><span class="number">3</span></span></span>;
<span class="rule">}</span></span>

<span class="class">.limeGreen</span><span class="rules">{
    <span class="rule"><span class="attribute">background</span>:<span class="value"> limeGreen</span></span>;
    <span class="rule"><span class="attribute">flex-basis</span>:<span class="value"><span class="number">100</span>%</span></span>;
<span class="rule">}</span></span>
</code></pre><p>效果图如下：</p>
<p><a href="http://d.pr/i/pjvM" target="_blank"><img src="http://d.pr/i/pjvM.png" alt="flex-shrink"></a></p>
<p>需要注意的是，<code>flex-shrink</code> 只在弹性项目充满外层容器后才会生效，而 <code>flex-grow</code> 则在外层容器空间尚未完全分配时起效。</p>
<h3 id="flex">flex</h3>
<p>此属性是上述三个属性的速写属性，可授受的值为：</p>
<pre><code>flex: <span class="constant">none</span> |[&lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;?||&lt;<span class="string">'flex-basis'</span>&gt;]
</code></pre><h2 id="order">order</h2>
<blockquote>
<p>作用：设置弹性项目在弹性容器中的显示顺序，一般来说弹性项目的显示顺序与源代码中的元素声明顺序相同，除非特别声明 <code>order</code> 属性。<br>初始值：0<br>可接受的值：整数</p>
</blockquote>
<p><strong>注意</strong>：在<code>order</code>相同的情况下，顺序将以元素声明顺序确定。</p>
<p>示例代码：</p>
<pre><code><span class="id">#flex</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300</span>px</span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200</span>px</span></span>;
    <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;
<span class="rule">}</span></span>

<span class="class">.dodgerBlue</span><span class="rules">{
    <span class="rule"><span class="attribute">background</span>:<span class="value"> dodgerBlue</span></span>;
    <span class="rule"><span class="attribute">flex-basis</span>:<span class="value"><span class="number">100</span>%</span></span>;
    <span class="rule"><span class="attribute">order</span>:<span class="value"><span class="number">2</span></span></span>;
<span class="rule">}</span></span>

<span class="class">.limeGreen</span><span class="rules">{
    <span class="rule"><span class="attribute">background</span>:<span class="value"> limeGreen</span></span>;
    <span class="rule"><span class="attribute">flex-basis</span>:<span class="value"><span class="number">100</span>%</span></span>;
    <span class="rule"><span class="attribute">order</span>:<span class="value"><span class="number">0</span></span></span>;
<span class="rule">}</span></span>

<span class="class">.yellowGreen</span><span class="rules">{
    <span class="rule"><span class="attribute">background</span>:<span class="value"> yellowGreen</span></span>;
    <span class="rule"><span class="attribute">flex-basis</span>:<span class="value"><span class="number">100</span>%</span></span>;
    <span class="rule"><span class="attribute">order</span>:<span class="value"><span class="number">1</span></span></span>;
<span class="rule">}</span></span>
</code></pre><p>效果图：</p>
<p><a href="http://d.pr/i/n8LP" target="_blank"><img src="http://d.pr/i/n8LP.png" alt="flex-order"></a></p>
<h2 id="flex-direction">flex-direction</h2>
<blockquote>
<p>作用：设置弹性项目的显示方向<br>初始值：row<br>可接受的值：row | row-reverse | column | column-reverse</p>
</blockquote>
<p>属性比较容易理解，不截图了。</p>
<h2 id="flex-wrap">flex-wrap</h2>
<blockquote>
<p>作用：设置弹性项目在分配空间时横向空间到分配完后是否进行换行分配，此时纵向空间将结合弹性项目本身的高度和弹性盒本身的高度来确定。<br>初始值：nowrap<br>可接受的值：nowrap | wrap | wrap-reverse</p>
</blockquote>
<p>属性比较容易理解，不截图了。</p>
<h2 id="flex-flow">flex-flow</h2>
<p>即 <code>flex-direction</code> 和 <code>flex-wrap</code>　的速写属性，可授受的值为：</p>
<pre><code>flex-<span class="keyword">flow</span>: &lt;<span class="string">'flex-direction'</span>&gt; &lt;<span class="string">'flex-wrap'</span>&gt;
</code></pre><h2 id="align-items/align-self/align-content/justify-content">align-items/align-self/align-content/justify-content</h2>
<h3 id="align-items">align-items</h3>
<blockquote>
<p>作用：对弹性盒设置弹性项目的对齐方式<br>初始值：stretch<br>可接受的值：flex-start | flex-end | center | stretch | baseline</p>
</blockquote>
<h3 id="align-self">align-self</h3>
<blockquote>
<p>作用：对弹性项目本身设置其对齐方式<br>初始值：auto<br>可接受的值：auto | flex-start | flex-end | center | baseline | stretch</p>
</blockquote>
<p><code>auto</code>：如果弹性项目的父元素是一个弹性容器，<code>align-self</code>与弹性容器的<code>align-items</code>属性的值一致。否则其值为<strong>stretch</strong>。</p>
<h3 id="align-content">align-content</h3>
<blockquote>
<p>作用：让弹性项目之间的行间距按照设置的值进行分布，分布方向与 <code>flex-direction</code> 中设置的方向相同<br>初始值：stretch<br>可接受的值：flex-start | flex-end | center | space-between | space-around | stretch</p>
</blockquote>
<p>两个特别的值说明：</p>
<ul>
<li>space-between：弹性项目在 <code>flex-direction</code> 设置的方向上进行两端对齐</li>
<li>space-around：弹性项目在行间距中间的位置进行对齐</li>
</ul>
<p>效果图：</p>
<p><a href="http://d.pr/i/X3il" target="_blank"><img src="http://d.pr/i/X3il.png" alt="align-content"></a></p>
<h3 id="justify-content">justify-content</h3>
<blockquote>
<p>作用：设置弹性项目在主分布轴上的对齐方式（与文字对齐方式类似）<br>初始值：flex-start<br>可接受的值：flex-start | flex-end | center | space-between | space-around</p>
</blockquote>
<p>直接看图比较好理解：</p>
<p><a href="http://d.pr/i/yXgF" target="_blank"><img src="http://d.pr/i/yXgF.png" alt="justify-content"></a></p>
]]></content>
    
    
      <category term="webdev" scheme="http://blog.edi-c.com/tags/webdev/"/>
    
      <category term="css3" scheme="http://blog.edi-c.com/tags/css3/"/>
    
      <category term="ie11" scheme="http://blog.edi-c.com/tags/ie11/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IE11 兼容性小指南]]></title>
    <link href="http://blog.edi-c.com/post/ie11-compatibility-guide.html"/>
    <id>http://blog.edi-c.com/post/ie11-compatibility-guide.html</id>
    <published>2013-08-29T03:20:00.000Z</published>
    <updated>2014-05-23T17:04:24.000Z</updated>
    <content type="html"><![CDATA[<p>手贱升级了 Windows 8.1 之后，发现 IE11 在 HTML5 兼容性又有变化，感觉十分蛋疼，写篇文章记录一下遇到的两个比较明显的问题。</p>
<p>关于“增强的保护模式”和代理问题，大家可以看一下<a href="http://blog.edi-c.com/post/local-proxy-and-ie-enhanced-protected-mode" target="_blank">这篇文章</a>。</p>
<h2 id="文档模式的变化">文档模式的变化</h2>
<p><a href="http://d.pr/i/tbnI" target="_blank"><img src="http://d.pr/i/tbnI.png" alt="ie11-dev-tool"></a></p>
<p>IE11 中默认使用两种文档模式：IE7 和 Edge。IE7 的文档模式跟兼容模式类似，而 Edge 模式则是指当前版本的 IE 下可以使用的最高的文档模式。IE 开发者工具中只能选这两种模式，如果要使用指定的文档模式（如 IE10 或者 IE9），则需要在页面中添加指定的 <code>meta</code> 标签，如下（按需选择添加）：</p>
<pre><code><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"x-ua-compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=10"</span> &gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"x-ua-compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=9"</span> &gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"x-ua-compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=8"</span> &gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"x-ua-compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=7"</span> &gt;</span>
</code></pre><p>如果需要测试 Quirks Mode，则可以使用下面的标签之一：</p>
<pre><code><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"x-ua-compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=EmulateIE9"</span> &gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"x-ua-compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=EmulateIE8"</span> &gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"x-ua-compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=EmulateIE7"</span> &gt;</span>
</code></pre><h2 id="Flexbox（弹性框）布局更新">Flexbox（弹性框）布局更新</h2>
<p>需要更详细的信息的话，可以到<a href="http://msdn.microsoft.com/zh-cn/library/ie/dn265027(v=vs.85" target="_blank">这篇文章</a>.aspx)进行查阅。</p>
<p>IE11 里面，Flexbox 的更新主要是一些属性名字的变化（表现也有少量变化，考虑到这本来就属于测试性的属性，变化也是正常）。下面根据官网的更新内容简单总结一下：</p>
<p>下面的属性命名在 IE11 中发生了变化：</p>
<table>
<thead>
<tr>
<th>IE10</th>
<th>IE11</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-ms-flex-wrap</code></td>
<td><code>flex-wrap</code></td>
</tr>
<tr>
<td><code>-ms-flex-order</code>  和 <code>flex-order</code></td>
<td><code>order</code></td>
</tr>
<tr>
<td><code>-ms-flex-pack</code></td>
<td><code>justify-content</code></td>
</tr>
<tr>
<td><code>-ms-flex-align</code></td>
<td><code>align-items</code></td>
</tr>
<tr>
<td><code>-ms-flex-item-align</code></td>
<td><code>align-self</code></td>
</tr>
<tr>
<td><code>-ms-flex-line-pack</code></td>
<td><code>align-content</code></td>
</tr>
</tbody>
</table>
<p>下面的属性所支持的值也发生了变化：</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Old value</th>
<th>New value</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>display</code></td>
<td><code>-ms-flexbox</code></td>
<td><code>flex</code></td>
</tr>
<tr>
<td><code>display</code></td>
<td><code>-ms-inline-flexbox</code></td>
<td><code>inline-flex</code></td>
</tr>
<tr>
<td><code>flex-wrap</code></td>
<td><code>none</code></td>
<td><code>nowrap</code></td>
</tr>
<tr>
<td><code>align-content</code>/<code>align-items</code>/<code>align-self</code>/<code>justify-content</code></td>
<td><code>start</code></td>
<td><code>flex-start</code></td>
</tr>
<tr>
<td><code>align-content</code>/<code>align-items</code>/<code>align-self</code>/<code>justify-content</code></td>
<td><code>end</code></td>
<td><code>flex-end</code></td>
</tr>
</tbody>
</table>
<p>当然，部分旧的值仍然有效（如<code>display:-ms-flexbox</code>），但是部分属性变化将有变化，如下面所说的 <code>flex</code> 属性。</p>
<h3 id="flex_属性">flex 属性</h3>
<p>官方文档中作了以下的注明：</p>
<ul>
<li>已添加 <code>flex</code> 属性，作为 <code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code> 属性的速记属性。</li>
<li><code>align-content</code> 和 <code>justify-content</code> 属性现在支持值 <code>space-around</code> 与 <code>space-between</code>。</li>
<li>弹性项目的默认弹性行为已更改。 在 Internet Explorer 10 中，不适合容器的弹性项目将溢出容器边缘或者是被修剪到与容器边缘对齐。 现在，从 IE11 Preview 开始，这些项目将缩小来适应其容器（如果指定，则最小缩至 <code>min-width</code> 值）。 使用 <code>flex-shrink</code> 属性可更改此行为。</li>
</ul>
<p>让人蛋疼的是第三点（虽然现在看起来可以理解），下面有个 demo 可以让大家理解一下。</p>
<pre><code>IE10下：
<span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css">
    <span class="class">.container</span><span class="rules">{
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">400</span>px</span></span>;
        <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200</span>px</span></span>;
        <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;
    <span class="rule">}</span></span>

    <span class="id">#msflexbox</span><span class="rules">{
        <span class="rule"><span class="attribute">display</span>:<span class="value"> -ms-flexbox</span></span>;
    <span class="rule">}</span></span>

    <span class="class">.dodgerBlue</span><span class="rules">{
        <span class="rule"><span class="attribute">background</span>:<span class="value"> dodgerBlue</span></span>;
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100</span>%</span></span>;
    <span class="rule">}</span></span>

    <span class="class">.limeGreen</span><span class="rules">{
        <span class="rule"><span class="attribute">background</span>:<span class="value"> limeGreen</span></span>;
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100</span>%</span></span>;
    <span class="rule">}</span></span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>效果图：</p>
<p><a href="http://d.pr/i/g518" target="_blank"><img src="http://d.pr/i/g518.png" alt="ie10-flexbox-overflow"></a></p>
<p>此时 <code>container</code> 中的元素将会充满整个 <code>container</code>，溢出的部分则被 <code>overflow:hidden</code> 所隐藏（淡蓝色部分为 Inspector 高亮）。</p>
<p>而同样的 CSS 在 IE11 下将会表现如下图：</p>
<p><a href="http://d.pr/i/aOMl" target="_blank"><img src="http://d.pr/i/aOMl.png" alt="ie11-flexbox-shrink"></a></p>
<p>这样则会造成一定的适配问题，如果需要在 IE11 下展示与 IE10 相同的效果，则可以调节 <code>flex-shrink</code> 此属性（<a href="http://msdn.microsoft.com/en-us/library/ie/dn254948(v=vs.85" target="_blank">相关文档</a>.aspx)）。我们对 <code>.container</code> 下的元素添加一个 CSS <code>flex-shrink: 0;</code>，则两个版本的表现一致。</p>
<p>关于 Flexbox 的布局，我将在<a href="http://blog.edi-c.com/post/flexbox-layout" target="_blank">另外的一篇文章</a>中进行叙述。</p>
]]></content>
    
    
      <category term="webdev" scheme="http://blog.edi-c.com/tags/webdev/"/>
    
      <category term="css3" scheme="http://blog.edi-c.com/tags/css3/"/>
    
      <category term="ie" scheme="http://blog.edi-c.com/tags/ie/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决 IE11 无法代理到 Fiddler 进行抓包]]></title>
    <link href="http://blog.edi-c.com/post/local-proxy-and-ie-enhanced-protected-mode.html"/>
    <id>http://blog.edi-c.com/post/local-proxy-and-ie-enhanced-protected-mode.html</id>
    <published>2013-08-28T13:55:00.000Z</published>
    <updated>2014-05-23T17:05:23.000Z</updated>
    <content type="html"><![CDATA[<h1 id="解决_IE11_无法代理到_Fiddler_进行抓包">解决 IE11 无法代理到 Fiddler 进行抓包</h1>
<p>这个问题很诡异，今天尝试更新到 Windows 8.1 RTM 之后，发现开启 Fiddler 后无法对 IE 进行抓包，具体情况如下：</p>
<ol>
<li>开启 Fiddler，设置本地代理和出口网关</li>
<li>在 Chrome 中可以正常抓包，但在 IE 中尝试打开网页时 Fiddler 中没有观察到有任何流量</li>
<li>运行 Fiddler Tools &gt; Sandbox 选项，网页可以正常打开，但仅限运行过此选项的 IE 实例，关闭网页重新打开，IE 仍然无法正常使用。</li>
</ol>
<p>这个问题确实让人很恼火，很神奇的问题。最后是怎么解决的呢？在乱打乱撞之下，在 <strong>Internet 选项 -&gt; 高级 </strong>选项页中，把<strong>增强的保护模式</strong>给关闭之后，Fiddler 又可以正常捕捉到 IE 的流量了。</p>
<p>后来查了一下 Google，发现有人在使用 GoAgent 的时候也出现过这样的情况。总的来说，就是这个<strong>增强的保护模式</strong>惹的祸。</p>
]]></content>
    
    
      <category term="webdev" scheme="http://blog.edi-c.com/tags/webdev/"/>
    
      <category term="fiddler" scheme="http://blog.edi-c.com/tags/fiddler/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ASP.NET MVC 3 开发过程小记（一）]]></title>
    <link href="http://blog.edi-c.com/post/aspnet-mvc-3-dev-notes-001.html"/>
    <id>http://blog.edi-c.com/post/aspnet-mvc-3-dev-notes-001.html</id>
    <published>2013-08-22T00:48:00.000Z</published>
    <updated>2014-05-23T17:06:19.000Z</updated>
    <content type="html"><![CDATA[<p>刚刚新建工程的时候，如果不想用 IIS Express 的话，需要自行开启配置 Windows 8 自带的 IIS 服务。在控制面板-&gt;添加删除程序左边就可以添加 IIS 服务了。</p>
<h2 id="运行网站时出现“HTTP_错误_500-19_–_内部服务器错误”">运行网站时出现“HTTP 错误 500.19 – 内部服务器错误”</h2>
<p>出现这个错误时，可以先参考微软的 KB（<a href="http://support.microsoft.com/kb/942055" target="_blank">KB942055</a>），里面很详细地介绍了9种不同的错误码下的处理方法。</p>
<p>如果出现 <code>0x80070021</code> 的话，可以按下面的方法处理：</p>
<p>先确定错误信息中提示的是 Handlers 被锁定还是 Modules 被锁定，然后开启 CMD，按需执行命令：</p>
<pre><code><span class="variable">%windir</span><span class="variable">%\</span>system32\inetsrv\appcmd unlock config -section:<span class="keyword">system</span>.webServer/handlers

<span class="variable">%windir</span><span class="variable">%\</span>system32\inetsrv\appcmd unlock config -section:<span class="keyword">system</span>.webServer/modules
</code></pre><p>另外，在安装 IIS 的时候，记得选中 ASP.NET，否则也会出现类似的信息。</p>
]]></content>
    
    
      <category term="webdev" scheme="http://blog.edi-c.com/tags/webdev/"/>
    
      <category term="aspnet" scheme="http://blog.edi-c.com/tags/aspnet/"/>
    
      <category term="mvc" scheme="http://blog.edi-c.com/tags/mvc/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WP8 上的 IE10 对 @font-face 属性的支持程度]]></title>
    <link href="http://blog.edi-c.com/post/wp8-ie10-font-face-support.html"/>
    <id>http://blog.edi-c.com/post/wp8-ie10-font-face-support.html</id>
    <published>2013-07-03T09:19:00.000Z</published>
    <updated>2014-05-23T17:12:03.000Z</updated>
    <content type="html"><![CDATA[<p>现在的前端都流行把一些小图标转换成字体，然后利用 <code>@font-face</code> 这个 CSS 属性来定义一个页面专有的字体，从而达到把小图标转换成字符显示的效果。这样做除了可以省流量，图标的显示效果也很好，放大缩小都不怎么会影响效果，确实是一个不错的的手段。</p>
<p>关于 CSS3 中的 <code>@font-face</code> 属性，可以参阅<a href="http://www.w3cplus.com/content/css3-font-face" target="_blank">这篇文章</a>，里面有很详细的属性应用介绍。</p>
<p>但是，在 PC 的 IE10 下面尝试嵌入 ttf 格式的字体时，会提示这样的信息：</p>
<blockquote>
<p>CSS3114: @font-face 未能完成 OpenType 嵌入权限检查。权限必须是可安装的。 </p>
</blockquote>
<p>原因可能是自制的 ttf 格式没有正确的安装权限造成的。因此，有必要对 ttf 格式进行转换，PC 上的 IE10 支持多种字体格式，如 Embedded-Opentype(eot)、Web Open Font Format(woff)、TrueType(ttf) 和 Scalable Vector Graphics(SVG)，具体可以参考上面文章。</p>
<p>但 WP8 上的 IE10 对字体格式的要求更严格，转换成 IE 专用的 eot 格式之后还是不能正常显示。于是又查了一下资料，发现还是能用的（<a href="http://stackoverflow.com/questions/15819717/font-awesome-not-displayed-on-windows-phone-8" target="_blank">点击这里</a>）。于是把格式换成 woff 之后就没有问题了，ttf 转 woff 的工具在网上都有，可以在线转换（<a href="http://everythingfonts.com/" target="_blank">点击这里有一个网站可以试试</a>）。</p>
<p>PS：最好还是在引用的 url 后面声明一下字体的格式。</p>
<pre><code><span class="at_rule">@<span class="keyword">font-face</span></span> <span class="rules">{
    <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">'Test'</span></span></span>;
    <span class="rule"><span class="attribute">src</span>:<span class="value"><span class="function">url(font/font.woff)</span> <span class="function">format(<span class="string">'woff'</span>)</span></span></span>;
<span class="rule">}</span></span>
</code></pre>]]></content>
    
    
      <category term="webdev" scheme="http://blog.edi-c.com/tags/webdev/"/>
    
      <category term="wp8" scheme="http://blog.edi-c.com/tags/wp8/"/>
    
  </entry>
  
</feed>
